<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>题解 on Arahc&#39;s blog</title>
    <link>http://walker68145.github.io/Arahc.github.io/categories/%E9%A2%98%E8%A7%A3/</link>
    <description>Recent content in 题解 on Arahc&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Dec 2021 21:43:22 +0800</lastBuildDate>
    
        <atom:link href="http://walker68145.github.io/Arahc.github.io/categories/%E9%A2%98%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>P5633最小度限制生成树 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/p5633%E6%9C%80%E5%B0%8F%E5%BA%A6%E9%99%90%E5%88%B6%E7%94%9F%E6%88%90%E6%A0%91-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Tue, 28 Dec 2021 21:43:22 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/p5633%E6%9C%80%E5%B0%8F%E5%BA%A6%E9%99%90%E5%88%B6%E7%94%9F%E6%88%90%E6%A0%91-%E9%A2%98%E8%A7%A3/</guid>
      <description>wqs 二分，但是没有归排。
wqs 我们考虑朴素地用 kruscal 构造一个生成树，是按照边权加边的。这种方法显然无法保证 $s$ 的度。
因此我们考虑把和 $s$ 相邻的边的边权修改一下，使得最后的生成树能让 $s$ 有那么多的度数。
具体的修改方法，我们可以 wqs 二分一个 $\Delta$，每次让和 $s$ 相邻的点的边权都加上 $\Delta$。然后用朴素地 kruscal 跑就可以了。
根据常识，如果这次尝试中 $s$ 的度多于限制，就要让边权更大使得其更不容易被选到；如果更少就同理。
无解的情况不算很多：
 原图不连通（没有最小生成树）。 $s$ 的度本身就不到 $k$。 二分得到的 $\Delta$ 不能使 $s$ 的度达到 $k$。即二分到无解。  我们发现前两种情况都可以归化为第三种情况：如果原图不连通或者 $s$ 的度本身就没有达到 $k$，那么二分出来的 $\Delta$ 一定不能满足条件。
因此我们只需要判断第三种条件就可以了。
 如果按照以上方法裸地实现，你会发现你有 T。
我们考虑上面代码的复杂度是什么，假设二分的值域范围为 $a$，本题中也就是大家的 $(-\infty,\infty)$。每次二分排序一遍所有的边，然后跑一遍 kruscal，总复杂度 $\operatorname{O}(m\log m\log a)$。
我们进一步发现，因为每次都只修改了和 $s$ 相邻的边，那么我们把这一类边单独提出来。和不与 $s$ 相邻的边分开，记为 $1$ 类边和 $2$ 类边。
两类边分别排序之后，并不需要每次归并，因为给一类边所有权值加上一个 $\Delta$ 后，相对大小不改变，因此只需要在二分前分别排好序，后面就没必要排序了。kruscal 里面直接判断此时一类边边权小还是二类边边权小即可。
复杂度 $\operatorname{O}(m\log a)$。</description>
    </item>
    
    <item>
      <title>线性基入门</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 22 Dec 2021 21:47:24 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%85%A5%E9%97%A8/</guid>
      <description>简介 线性基是一个一般用于处理集合中异或相关的问题，其时间复杂度和空间复杂度都是 $\operatorname{O}(\log a)$ 级别，$a$ 为值域。
线性基最常用的做法是兹瓷以下三个操作：
 向集合内插入一个数。 查询集合内若干数能异或得到的最大值。 查询一个数是否能被集合内若干数异或得到。  当然它还有很多副效果，比如还可以用来……
 查询集合内若干数能异或得到的最小值。 查询集合内若干数能异或得到的第 $k$ 小值。 查询集合内若干数能异或得到的第 $k$ 大值。  等等，你可以尽情扩展，只要你能做到。
本文章 $\LaTeX$ 完全按照数学标准进行，例如信息学的赋值语句不会使用 $a=b$ 表示而会表示为 $a\leftarrow b$。如有造成阅读困难，那是你自己的事，不要找我。
若无特殊注明，一个数的某一位默认为二进制下而非十进制下，没有特殊标明和特判就不考虑 $0$。
线性基基本操作 从一个例题引入已经是典中典了吧。
 例 1：维护一个集合，支持两种操作：
 插入一个数。 查询集合内若干数能异或得到的最大值。  $n\leqslant 10^6,1\leqslant a_i\leqslant 2^{50}$
 你发现这两个操作就是前面说的基本操作的前两个……
暴力做法非常显然，复杂度是 $2^n$ 的，没必要多说。直接开正题。
线性基基本原理 线性基只需要用数组实现，记为 ${p}$。其中 $p_i$ 的最高位的 $1$ 在第 $i$ 位。
用线性基维护一个数组，我们只需要考虑能让原数组 ${a}$ 可以通过 ${p}$ 经过异或得到即可。
求线性基的时候，先考虑插入一个数 $x$。我们优先找到 $x$ 的 $1$ 的最高位（设为 $i$），如果线性基中没有对应的位，则把 $x$ 插入到线性基内，令 $p_i\leftarrow x$。</description>
    </item>
    
    <item>
      <title>Markdown 入门</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/markdown-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 30 Nov 2021 18:41:00 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/markdown-%E5%85%A5%E9%97%A8/</guid>
      <description>前段时间搞了一个 $\LaTeX$ 入门，现在把 markdown 的东西也补一下。
因为 mardown 的内容比 $\LaTeX$ 的数学公式不知道少了多少，所以写起来也比较简单。下文中会现有演示，演示的下面是这一段演示的 markdown 源码，从中就可以看出格式了。
标题 因为标题会破坏文章的目录结构这里不演示。
# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 一级标题一般为文章的总标题，因此建议分不同部分的时候从二级标题开始划分。
字体 字体有 粗体，==高亮==，斜体，粗斜体，删除线 几个。
字体有 **粗体**，==高亮==，*斜体*，***粗斜体***，~~删除线~~ 几个。 引用块  我的知识在不断增加，你们的都在不断减少。——XeniaF
 &amp;gt; 我的知识在不断增加，你们的都在不断减少。——XeniaF 代码 有行内代码，比如 for(register int i=1;i&amp;lt;=n;++i)，还有代码块：
for(register int i=1;i&amp;lt;=n;++i) 源码就是这样，都比较好写，代码块中三个点后面可以写 markdown 支持的代码语言。
有行内代码，比如 `for(register int i=1;i&amp;lt;=n;++i)`，还有代码块： ```cpp for(register int i=1;i&amp;lt;=n;++i) ``` 列表 列表有无序列表和有序列表：
 这是无序列表。 想不到吧，这也是。 一时间想不到这里写什么了。  + 这是无序列表。 + 想不到吧，这也是。 + 一时间想不到这里写什么了。 当然无序列表也可以用一些别的符号比如 -，但是个人习惯用 +。</description>
    </item>
    
    <item>
      <title>OI 相关的非切题内容</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/oi-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%9D%9E%E5%88%87%E9%A2%98%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sun, 28 Nov 2021 21:42:04 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/oi-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%9D%9E%E5%88%87%E9%A2%98%E5%86%85%E5%AE%B9/</guid>
      <description>LaTeX 比较基础的 $\LaTeX$ 语法我已经在这篇博客里面写出了。对于写题解、出题面之类已经足够，对于出一套题面并整合成 pdf 文件这类需求，需要额外在网上查阅相关辅助资料。或者向他人寻求题目模板。
题面和题解通常都需要用规范美观的 $\LaTeX$ 和 markdown 排版。
markdown 比较基础的 markdown 已经在我的博客写出了。写题解、出题之类日用完全足够。当然改颜色之类没有什么必要提及，至于内嵌 HTML，首先你得会……
NOILINUX2.0 新版 NOILINUX 非常高级，它基于 Ubuntu20.04。最主要的变化就是 IDE 变多了。对于不喜欢不习惯用 Emacs 的人来说，除了 gedit 有了更多选择。主要（最吸引人的）多了 sublime，vscode。另外的新增，比如 codeblock 之类，一般不会用到。
其中 sublime 是没付钱的英文版本。vscode 是除编译插件（C++，C，Pas，Python）外没有任何其他插件（包括 code runner）的英文版本。这两个编辑器貌似都是自带括号自动补全的，如有不适自行调整。
支持了 Python3，对拍方面会更加方便。前提是会这个语言
其次就是 C++ 的兹瓷版本成功进化到了 C++14，值得注意的是 C++14 算是一个跑得比较快的版本，再加上最近这些比赛评测的时候编译选项都有 -O2，说明 CCF 正尽量不让常数问题成为一个很大的阻碍。编译的时候在编译选项里添加 -std=c++14 就可以用 C++14 的标准编译。auto,__int128,__gcd 等等功能现在都不会 CE 了！（主要是 int128，不过估计 CCF 后续也不会出什么高精度题了）。
当然也有一些东西在 C++14 里用就很危险了，比如 C++14 弃掉的 gets，还有 C++14 停用 C++17 废除的 random_shuffle。
平时练习可以参考的编译选项：
g++ -o code code.</description>
    </item>
    
    <item>
      <title>替罪羊与KDTree</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E4%B8%8Ekdtree/</link>
      <pubDate>Thu, 25 Nov 2021 21:48:19 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E4%B8%8Ekdtree/</guid>
      <description>前言 替罪羊树是一种平衡树。对于平衡树的二叉搜索树性质，已经在这个博客比较详细地提到过了。那篇博客内，详细讲了的平衡树是 Splay。注意到 Splay 维护平衡的时候会直接通过旋转改变树的结构，在写平衡树套什么东西的时候，Splay 维护起来可能会有写吃力。因此这里重点写一下替罪羊树。
KD-Tree 和替罪羊树维护树平衡的方法一样，因此也可以提出来讲讲。
其实重点是KD不是替罪羊
替罪羊树 平衡树的插入，删除等操作基本都是一致的，重要的是如何维护树的平衡。例如给出一个不太平衡的树：
虽然单次查询不至于退化成 $\operatorname{O}(n)$，但相对 $\log$ 的级别也够慢了。我们发现比较不平衡的两个典型，就是 $10$ 和 $64$ 的两个子树。
替罪羊树的思想很简单，现在既然这两个地方不平衡，那我直接把这两个子树重建一下就可以了。
平衡多了。但是众所周知，我不能每次修改一下就要全部重新把不平衡的地方重建。为了保证复杂度，应该需要衡量一个平衡因子 $\alpha$，其中 $\alpha\in(0.5,1)$，如果一个节点的左右子树中，较大的那个子树占比达到了 $\alpha$，就给这个子树重构一下。合适的 $\alpha$ 可以控制替罪羊树的复杂度。
一般而言，$\alpha$ 取到 $[0.65,0.75]$ 就够了。如果你的 $\alpha$ 取到了 $0.9$ 才能保证不出锅，多半就是写假了。没有写假、平衡因子设置合理的替罪羊树单次操作复杂度基本 $\log$ 级。
具体的重构实现，可以先把要重构的子树拍扁，即按照中序遍历得到对应的序列，然后对于这个序列重新构建子树即可。每次重新构建的时候，应该以中位数对应的节点当作根节点，因为前面是在替罪羊树上中序遍历得到的序列，已经有序了，直接取中间位置就是中位数。
和 Splay 不同的地方还有替罪羊的删除操作。替罪羊树并不能很好地直接删除，因此通常以打标记的方法，如果这个数字被删掉了（出现次数为 $0$），在下一次重构的时候碰到这个点就不管它了。如果写的简单一点也可以直接忽视删除操作，保留原节点，大部分情况都不会被卡。
具体细节可以参考如下代码：
struct SheepTree{ int root,tot,tmp; int pb[max_n]; // 记录拍扁时的中序遍历数组 	SheepTree(){root=tot=tmp=0;} const double alpha=0.75; struct dot{ int ls,rs,sz,cnt,sd,sm,val; // 左右儿子、sz、出现次数、sd、sm、维护的值 	dot(){ls=rs=sz=cnt=sd=sm=val=0;} }a[max_n]; #define ls(x) (a[x].ls) 	#define rs(x) (a[x].</description>
    </item>
    
    <item>
      <title>P3830随机树 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/p3830%E9%9A%8F%E6%9C%BA%E6%A0%91-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Thu, 28 Oct 2021 21:42:44 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/p3830%E9%9A%8F%E6%9C%BA%E6%A0%91-%E9%A2%98%E8%A7%A3/</guid>
      <description>upd：一个转移的 $j,y$ 打反了，已更正。此外修复了部分错别字，图床换源。
题目大意 题目传送门。
 一个初始情况只有根节点的二叉树，定义一个点的深度是这个点到根节点的路径边数，根节点深度为 $0$，一颗树的深度是所有点深度最大值。每次等概率地选择一个叶子，给它挂上一对左右儿子。直到叶子数量为 $n$。求：所有叶子节点平均深度的期望、整个树深度的期望，结果保留六位小数。（$n\leqslant 300$）
 原题目是 $n\leqslant 100$，我加强一下，$n\leqslant 300$，卡一卡 $n^4$ 暴力。
题解 平均深度 朴素的概率 DP（裸题）里面很少出现求一个平均的东西的概率。不过还是可以尝试用平时写裸 DP 的方式去试一波。设 $f_i$ 表示已经建了 $i$ 个叶子，此时所有叶子的深度平均值。我们知道平均深度等于总深度除以叶子数，所以 $i$ 个叶子的树叶子深度之和为 $f_i\times i$。
考虑我现在造了一个树，这个树上对于某一个节点 $i$，深度为 $dep_i$，给 $i$ 挂一对儿子会对总的深度造成多少影响。首先这个点不再是叶子了，所以要减掉一个 $dep_i$，然后多了俩叶子，深度是这个叶子 $+1$。因此加上 $2dep_i+2$。总的贡献为：$dep_i+2$。同时叶子数量多 $1$，从 $f_{i-1}$ 转移到 $f_i$。
$i-1$ 个叶子，选到任意一个的概率都是 $\frac{1}{i-1}$，所以有：
$$ \begin{aligned} f_i\times i &amp;amp;=f_{i-1}\times(i-1)+\sum_j^{i-1}\frac{dep_j+2}{i-1} \ &amp;amp;=f_{i-1}\times i-f_{i-1}+\sum_j^{i-1}\frac{dep_j}{i-1}+\frac{2(i-1)}{i-1} \ \end{aligned} $$
其中 $\sum_j^{i-1}\frac{dep_j}{i-1}$ 就是 $i-1$ 个叶子的平均深度，所以 $\sum_j^{i-1}\frac{dep_i}{i-1}=f_{i-1}$，所以有：
$$f_i\times i=f_{i-1}\times i+2$$
得到 $f_i=f_{i-1}+\frac{2}{i}$，初始值 $f_1=0$（唯一的叶子就是根节点），$\operatorname{O}(n)$ 递推即可。</description>
    </item>
    
    <item>
      <title>CSP2021廊桥分配 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/csp2021%E5%BB%8A%E6%A1%A5%E5%88%86%E9%85%8D-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Sun, 24 Oct 2021 21:36:53 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/csp2021%E5%BB%8A%E6%A1%A5%E5%88%86%E9%85%8D-%E9%A2%98%E8%A7%A3/</guid>
      <description>题目大意 题目传送门。
分析部分为了节省字数，把国内区叫做 A，国际区叫做 B。
 $n$ 个廊桥分配给 A 和 B。A 有 $m_1$ 个飞机 B 有 $m_2$ 个飞机。每个飞机有一段区间表示停留时间。先到的飞机可以先占自己类的廊桥，使用到飞走，如果自己的类别没有可以使用的廊桥就只能停在飞机场。求最多能让多少飞机停在廊桥。
 本博客包含一个错解和两个正解（准确地说是正解和骗分在冥间数据骗到满分的解）。错解三分查找中给出了错误原因和 Hack，正解和伪正解分别是真正的正解线段树和玄学乱糊模拟退火。两个正解都给出了带注释的代码，希望大家阅读愉快。
考场解法（错解） 考虑一组最优解 $a_1,a_2$ 表示给 A 类 $a_1$ 廊桥，B 类 $a_2$ 个廊桥，如果减小 $a_1$ 的值，A 类区间就要删除更多的区间，B 类区间会减少需要删除的区间（使得剩下的飞机都可以停廊桥）。但是因为 $a_1,a_2$ 已经是最优解了，B 类区间减少的要删除的区间数量不大于 A 类区间要增加的区间数量。
因此推测最后的答案呈单峰性质。考虑三分查找找到峰值。
现在的问题就是我已经确定了 $a_1,a_2$，如何用一个可以接受的复杂度去求解需要删除多少个区间。不难看出，如果按照区间的左端点排个序，显然可以按照顺序，加进一个区间时，如果区间左端点上没有被至少 $a_i$ 个区间覆盖，就加进去，否则删掉这个区间。用线段树维护区间的覆盖情况。
复杂度 $\operatorname{O}(n\log_{\frac{3}{2}}\log_2 n)$，空间复杂度 $\operatorname{O}($ 能过 $)$。
 错误的原因是，可以证明这并不是单峰的。因为显然，有可能有多种方案，使得停在廊桥的飞机数量相同，而这多种方案的 $a_1,a_2$ 不一定是连续的。Hack 数据如下：
4 4 4 1 7 2 8 3 4 5 6 9 15 10 16 11 12 13 14 枚举所有的情况如下：</description>
    </item>
    
    <item>
      <title>多项式基本运算</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Tue, 19 Oct 2021 09:37:55 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</guid>
      <description>前言  在数学中，由若干个单项式相加组成的代数式叫做多项式（若有减法：减一个数等于加上它的相反数）。多项式中的每个单项式叫做多项式的项，这些单项式中的最高项次数，就是这个多项式的次数。其中多项式中不含字母的项叫做常数项。 在数学中，多项式（polynomial）是指由变量、系数以及它们之间的加、减、乘、幂运算（非负整数次方）得到的表达式。对于比较广义的定义，一个或零个单项式的和也算多项式。按这个定义，多项式就是整式。实际上，还没有一个只对狭义多项式起作用，对单项式不起作用的定理。$0$ 作为多项式时，次数定义为负无穷大（或 $0$）。单项式和多项式统称为整式。 （摘自：百度百科）
 多项式的定义初中就有，没必要多说吧。本文将会积累所有学了的有关多项式的知识，不定期更新内容。
本博客全文所有内容均不属于提高组考试范围，你要是硬说多项式加法可能有……那我也不能反驳。
多项式求和，单项式乘多项式 合并同类项，没必要多说吧。多项式求差同理。
单项式乘多项式就拆个括号。
多项式求积 假设对于两个多项式 $A,B$，有：
$$ A=\sum_{i=0}^{n-1} a_ix^i \ B=\sum_{i=0}^{m-1} b_ix^i $$
考虑如何求出两个多项式的积 $C=A\ast B$。
系数表示法，点值表示法 考虑上面的这两个式子，如果我们暴力地求解，不难得到最后的结果为：
$$C=\sum_{i=0}^{n+m-2} \sum_{j=0}^i a_j b_{i-j}x^i$$
暴力求解是 $\operatorname{O}(n^2)$ 的，复杂度不太能接受的亚子。我们考虑优化。
我们知道这种表示多项式的方法是最常见的，叫做系数表示法，众所不周知多项式的表示还可以用一种方法叫做点值表示法。根据初中数学知识，两点确定一个一次函数，三点确定一个二次函数……于是伟大的数学家们证明了一个定理：$n$ 个互异的点确定一个 $n-1$ 次函数。我们把 $A,B$ 用点值表示法表示就是：
$$A={ (x_1,\operatorname{f}(x_1)),(x_2,\operatorname{f}(x_2)),(x_3,\operatorname{f}(x_3)),\cdots,(x_n,\operatorname{f}(x_n)) } \ B={ (x_1,\operatorname{g}(x_1)),(x_2,\operatorname{g}(x_2)),(x_3,\operatorname{g}(x_3)),\cdots,(x_n,\operatorname{g}(x_n)) }$$
然后考虑 $C$ 如何表达。我们举个例子，假设一次多项式 $A={(0,-1),(2,5)}$，一次多项式 $B={(0,3),(2,-1)}$。不难得出系数表示法 $A=3x-1,B=-x+3$，根据系数表示法，得出它们的乘积 $C=-3x^2+10x-3$（假设记为函数 $\operatorname{h}$）。画下来：
我们发现一个现象：对于 $\forall x\in R$，$\operatorname{f}(x)\operatorname{g}(x)=\operatorname{h}(x)$。因此用点值表示法运算两个多项式的乘积的方法是：（后续 $n$ 均表示为两个多项式项数的较大值，且不足 $n$ 项的那个多项式，少的项全部视为用 $0x^k$ 补充成 $n$ 项）
$$C={ (x_i,\operatorname{f}(x_i)\operatorname{g}(x_i))\mid i\in N^+,i\in[1,n] }$$</description>
    </item>
    
    <item>
      <title>CF643C 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/cf643c-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Sat, 16 Oct 2021 14:33:28 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/cf643c-%E9%A2%98%E8%A7%A3/</guid>
      <description>看见题解里面全是斜率优化，没有李超线段树，所以写一篇纪念。
不想用李超线段树的也别略过啊 QAQ 还是有题目分析的。
博客阅读体验更佳。
题目传送门。
题目大意：  长度为 $n$ 的序列 $a$ 代表 $n$ 个关卡，划分成连续的 $m$ 段，记 $i$ 所属段左端点为 $l_i$。对于第 $i$ 个关卡用刚好一小时过关概率是 $\frac{a_i}{\sum_{j=l_i}^i a_j}$。如果没有过关要继续打这一关到过。求通关时间期望。$n\leqslant 2\times 10^5,m\leqslant 50$。
 原题的变量名设的和这里不一样的，在本题解内都以本题解的描述为主。
题目分析 Part1 期望 考虑一小时通过一关的概率是 $\dfrac{a_i}{\sum_{j=l_i}^i a_j}$。过一关需要的时间的期望。首先为了书写方便，我们用换元法，记 $x$ 表示分子，$y$ 表示分母。
如果你知道通过一关的时间期望怎么算，请直接跳转 Part2，如果只知道结论不知道推导，建议看一下 因为里面也打了我博客的广告。
通过一关的时间的期望：
$$ \begin{aligned} E &amp;amp;= \frac{x}{y}\cdot 1+\frac{y-x}{y}\cdot\frac{x}{y}\cdot 2 +(\frac{y-x}{y})^2\cdot \frac{x}{y}\cdot 3 + \cdots \ &amp;amp;= \frac{x}{y}[1+ 2\cdot\frac{y-x}{y} + 3\cdot(\frac{y-x}{y})^2 + 4\cdot(\frac{y-x}{y})^3 + \cdots] \ \end{aligned} $$
中括号里面的东西就是带系数的等比数列求和（$\sum_{k=2}^\infty k\cdot p^{k-1}$）的形式。我的这篇博客给出了形如 $\sum_{k=0}^\infty p^k$ 和 $\sum_{k=0}^\infty k\cdot p^k$ 的求值，虽然不一样但是变通一下即可。可以得到：</description>
    </item>
    
    <item>
      <title>2SAT入门</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/2sat%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 14 Oct 2021 09:55:51 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/2sat%E5%85%A5%E9%97%A8/</guid>
      <description>前置知识  Tarjan 没了  问题与解法 问题 2-SAT 问题的模板题目是：
 模板例题：对于 $n$ 个 bool 变量，变量值未知，给定 $m$ 个关系，每个关系形如：$x_i=c_1$ 或 $x_j=c_2$（$c_1,c_2\in{0,1}$）。求是否有给每个变量赋值的方案，若有解则输出一组解。时间复杂度要求线性。
 这类问题就是 2-SAT 问题，更加进一步地，如果关系是：$x_i=c_1$ 或 $x_j=c_2$ 或 $x_k=c_3$。那就是 3-SAT 问题……现在已经被证明，3-SAT 或以上的 k-SAT 问题，是 NPC 的，1-SAT 问题应该不需要多说，所以重点就是 2-SAT 问题了。
解法 2-SAT 问题给出的是两个点之间的关系，对于 $a=1$ 或 $b=0$ 这样一个条件，我们可以推导出以下几个关系：
 当 $a=0$ 时，$b$ 一定是 $0$。 当 $b=1$ 时，$a$ 一定是 $1$。  类似的，对于每一个种不同的关系，都可以推导出两个不同的式子：
   要么 a= 要么 b= 得到结论 1 得到结论 2     0 0 a=1 时，b=0 b=1 时，a=0   0 1 a=1 时，b=1 b=0 时，a=0   1 0 a=0 时，b=0 b=1 时，a=1   1 1 a=0 时，b=1 b=0 时，a=1    于是我们根据“当什么什么时，得到什么什么”建立一个图。注意的是，这个关系是不能反过来的，比如表格第一个行结论 1：当 $b=0$ 时，一定有 $a=1$ 吗？并不是，此时 $a$ 可以是 $0$ 也可以是 $1$，不受约束。因此关系是定向的，不能反过来，翻译成建图就是，我们要建立有向图。</description>
    </item>
    
    <item>
      <title>平面图判定 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E5%B9%B3%E9%9D%A2%E5%9B%BE%E5%88%A4%E5%AE%9A-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Sun, 03 Oct 2021 21:44:19 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E5%B9%B3%E9%9D%A2%E5%9B%BE%E5%88%A4%E5%AE%9A-%E9%A2%98%E8%A7%A3/</guid>
      <description>题目传送门。
定位：2-SAT。
前置知识 平面图 平面图：存在一种或几种方法，将这个图画在平面上，除了点之外，所有边之间没有交点的图。
例如，下面这两个都是平面图，因为前一个图可以拉成后一个的样子：
平面图定理 连通平面图有几个常用的定理：
记一个连通平面图的点数为 $n$，边数为 $m$。
 当 $n\geqslant 3$ 时，有 $m\leqslant 3\times n-6$。 当 $n\geqslant 3$ 时，存在一个点的度数不小于 $5$。  定义一个连通平面图把平面分成的块数为 $k$。如上面这个平面图，$k=6$（算上了最外圈以外的无限大的平面部分）。有：$n-m+k=2$。
平面图有关的更多笔记都会在以后写上。这里先写个大概。
题解 算法 题目简述：
 给定一个无向图，保证存在一条哈密顿回路。判定是否是平面图。$3\leqslant n\leqslant 200,m\leqslant 10^4$。
 存在一条哈密顿回路，不妨把这个回路当成一个圆，然后考虑其他的边。
现在我们的圆已经搞出来了，问题就是圆里面的各种弦有很多的相交。这并不代表圆里面有弦就不是平面图了，因为我们可以把一些边拉在外面。这里相比都能看出把 $AD,AE$ 拉到圆外面去，从圆周外绕过来，这就是个完美的平面图了，但是重要的是怎么让电脑知道要这么拉。
想到如果可以把所有有交点的弦提出来，那么这两个弦是不可能都在圆里了，如果一个在圆外一个在圆里显然可以，两个都在圆外，手玩一下就发现不行。因此就是：弦 $a$ 拉到圆外或弦 $b$ 拉到圆外。转化成 2-SAT 问题的解的存在性判定，迎刃而解。
题目的边数很大，不能直接枚举每条边，但是考虑到平面图的性质，因为 $n\geqslant 3$，所以 $m\leqslant 3\times n-6$，如果大于这个，就一定不是平面图。提前判掉之后，$m$ 就是 $594$ 以内了。可以枚举两个相交的弦，然后跑 2-SAT。
如何判定两个弦相交呢？考虑到在一个环上，按照环的顺序顺时针（或逆时针）编号，如果一个圆按顺序放了 $A,B,C,D$，一个弦连接到 $AC$，一个弦连接到 $BD$，就一定在内侧相交。为什么？左转插头 DP 找证明即可。
至此这道题就做完了。代码如下：
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int max_n=20005,max_m=2000006; inline int read(){ int x=0;bool w=0;char c=getchar(); while(c&amp;lt;&amp;#39;0&amp;#39; || c&amp;gt;&amp;#39;9&amp;#39;) w|=c==&amp;#39;-&amp;#39;,c=getchar(); while(c&amp;gt;=&amp;#39;0&amp;#39; &amp;amp;&amp;amp; c&amp;lt;=&amp;#39;9&amp;#39;) x=(x&amp;lt;&amp;lt;1)+(x&amp;lt;&amp;lt;3)+(c^48),c=getchar(); return w?</description>
    </item>
    
    <item>
      <title>图论入门</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 20 Sep 2021 21:48:46 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8/</guid>
      <description>图论是信息学竞赛中永远不失特色的一种算法集合。最常见也是相对简单的有：最短路，最小生成树，拓扑排序，部分树上的问题。此外还有深造一些的，如网络流，Tarjan 等。
图的结构 一个图由若干个点和连接点的若干个边组成。点的集合记作 $V$，边的集合记作 $E$，后文若无特殊说明，点集大小是 $n$，边集大小是 $m$。
边有不定向和定向两种。都不定向的图叫无向图，都定向的是有向图，有的定向有的不定向的是混合图。一般情况下，混合图和无向图可以转化为有向图的问题求解。无向图上任意两点之间都有连边的是完全图。
无向图中，所有点之间如果所有点互相可达，叫做无向连通图。有向图中若所有点互相可达，叫强连通图；若所有的有向边改为无向边后，原图变为连通图，则称作弱连通图。一般情况下，连通图在无向图上指无向连通图，在有向图上指强连通图。
树是只有 $n-1$ 条边的连通图，一般是无向的，但是可以人为定向，比如根节点到叶子，或叶子到根。
DAG 也就是有向无环图，环的意思就顾名思义就行。
分层图是一类图，一般是有向图。可以把图分成很多层，各层之间只能由一层的点到达另一层的点，不能回来，且不能跨层连边。一般把没有别的点可以来的那一层叫做第一层，由第一层来到第二层，到第三层……分层图的分层标准一般不是很严格，题目也不会直接丢出来一个分层图，而是要自己建模建分层图。
二分图是一种可以分成两部分的图，满足没有边连接两个同一部分的点。竞赛图是将无向完全图中的每个边定向之后得到的图。
平面图是一种可以画在平面上的图，其中除了每个点之外，所有边都没有交点的图。例如下面两个就是平面图，其中第一个可以画成第二个的形式：
基础 因为过于基础，基本都是简单带过，不过也会有例题。
图的存储 常见的存图方法有：边目录，邻接矩阵，邻接表，链式前向星。比较常用的三个是边目录、邻接矩阵、链式前向星。
边目录主要出现在最小生成树的算法中。存储方法是直接开一个结构体，记录一条边的起点终点边权等信息。当你对边有优先级要求的时候，一般会先用边目录存下来，然后按照某个优先规则排序。
邻接矩阵常用在点数较小的题目里面，方法是开一个二维数组表示边 $(i,j)$ 的权值或之类信息。在 floyd 最短路里比较常见。
链式前向星是最常用的存储方法，我一般写成这样：
struct graph{ int hd[max_n],nx[max_n],to[max_n],ct; graph(){ct=1;} // 初始化为 1，这样 i^1 就是 i 的反边 	inline void clear(){ ct=1, memset(hd,0,sizeof(hd)); } inline void add(int u,int v){ nx[++ct]=hd[u],hd[u]=ct,to[ct]=v; } }e; 值得注意的是，链式前向星存储后，遍历的时候（i=hd[u];i;i=nx[i]）是按照加边顺序的逆序遍历的。在初赛题目中可能会用到。
最短路 常见的最短路算法有（简写） BF，Dij，SPFA，Floyd，Jon。有的名字比较长我就用了简写。Jon 算法适用于预处理之后多次询问较快地求最短路，Dij 非常常用，是没有负边的时候求最短路，基于贪心，复杂度是 $(n+m)\log(n+m)$，不用 Dij 的时候一般是 SPFA，最慢是 $nm$ 的，但可以处理负权，Floyd 用到了动态规划的思想，可以经过改造后做很多图论。
  例题：在一张 $n$ 个点的带权完全图上，依次删掉 $x_1,x_2,\cdots,x_n$ 这些点，每次删掉一个点前，输出当前图存在的点两两之间最短路长度之和。$n\leqslant 500$。</description>
    </item>
    
    <item>
      <title>叫苦不迭 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E5%8F%AB%E8%8B%A6%E4%B8%8D%E8%BF%AD-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Mon, 20 Sep 2021 12:43:45 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E5%8F%AB%E8%8B%A6%E4%B8%8D%E8%BF%AD-%E9%A2%98%E8%A7%A3/</guid>
      <description>题意描述： 给定一个 $n$ 个点的森林，每个点上有 $a_i$ 个虫子，种类为编号为 $[1,a_i]$ 的种类里各一个，都是第一代虫子。每一代虫子中，种类为 $i$ 的活虫子会造成 $\varphi(i)$ 的贡献，然后对于每一个虫子，设其种类为 $i$，种类为 $j$，都会繁殖一个种类为 $\frac{i(j+1)}{j}$ 的虫子，是原虫子的下一代，然后原虫子会消亡。代数超过 $k$ 的虫子不再造成贡献。有 $m$ 次操作，每次操作为删掉并添加一条边（保证还是森林结构）或查询 $(u,v)$ 路径上所有点上的所有代虫子造成的贡献和。
$n,m\leqslant 10^5,k\leqslant a_i\leqslant 10^5$。
题解 注：$n,m,k,a_i$ 都同级，后文为了简便分析复杂度全部用 $n$ 算。 sigma 里面没有标明下界的都是 $1$ 开始，别杠了别杠了孩子怕了。
算法定位：数论，LCT，树链剖分（+线段树），其中正解是 LCT，部分分是数链剖分，数论是主体部分，主要是欧拉函数和莫比乌斯函数。大概难度定位：紫或黑。
暴力分数（0-10） 对于每次询问，枚举每个点的贡献，计算贡献就是直接一代一代算，且欧拉函数用 $\sqrt{n}$ 的方法进行。复杂度 $n^5\sqrt{n}$。有 $5$ 分。
将欧拉函数求法改为线性筛（如下代码），可以 $\operatorname{\Theta}(k)$ 预处理，$\operatorname{O}(1)$ 查询欧拉函数值，复杂度优化为 $n^5$，算上前面的分数档一共可以得到 $10$ 分。
inline void getphi(){ // 预处理欧拉函数，存在 phi[] 里 	memset(isprime,1,sizeof(isprime)); phi[1]=1,isprime[1]=0; for(register int i=2;i&amp;lt;=n;++i){ if(isprime[i]){ phi[i]=i-1; prime[++cnt]=i; } for(register int j=1;j&amp;lt;=cnt &amp;amp;&amp;amp; i*prime[j]&amp;lt;=n;++j){ isprime[i*prime[j]]=0; if(i%prime[j]==0){ phi[i*prime[j]]=phi[i]*prime[j]; break; } else phi[i*prime[j]]=phi[i]*(prime[j]-1); } } } 低档分数（10-20） 考虑前一代和后一代的种类的关系。假设前一代的种类是 $i_n$，代数是 $j_n$，后一代变成了 $i_{n+1}$ 和 $j_{n+1}$，有：</description>
    </item>
    
    <item>
      <title>LaTeX 数学公式</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Sat, 18 Sep 2021 21:40:08 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid>
      <description>前言规定  本文采取分类目录的方式记录，也就是博客左边的那个目录，可以在里面找你要找的公式内容。 为了方便，如果代指任意一个数学式子或公式或变量名等时，用“公式”的英文 formula 表示。 上面是对应字符，下面是插入方法。 operatorname 不会特殊介绍，只要知道格式是把某个东西写成一个函数的方法就行，一般用于最小公倍数，就是 $\operatorname{lcm}$，因为没有自带的这个函数，所以写成 \operatorname{lcm} 不会介绍字体和颜色。  插入公式方法和原则 对于一行里面你要插入一个公式，叫做行内公式，直接使用 $formula$ 的形式插入，比如下面一段文字：
这个方程式还是不难优化的，显然有 $f_i=s_{i_1}+a_i$。
这个方程式还是不难优化的，显然有 $f_i=s_{i_1}+a_i$。 对于插入一个单独占据一行的公式，将 $formula$ 替换为 $$formula$$，注意如果要插入单行公式，那么在写的时候这个公式也要单独换一行，不能和别的东西混在一行。比如下面一段文字：
这个方程式还是不难优化的，显然有： $$f_i=s_{i_1}+a_i$$
 这个方程式还是不难优化的，显然有： $$f_i=s_{i_1}+a_i$$ 原则上，使用 $\LaTeX$ 的行内公式时，如果公式前后有字，会在前后加一个空格，如果公式前后有标点，一般不加空格，例如上面的行内公式的例子，因为公式前面是汉字，所以加了一个空格，后面是标点，公式后面没有加空格隔开公式和标点，如果不是中文标点是英文标点，按照你自己的个人审美决定加不加就行。
一般，变量（如 $a$）、式子（如 $1+1&amp;gt;1$）这些，会用 $\LaTeX$ 来表示，但是一个英文名（如 LeaF）、一个英文算法（如 BSGS）、中文（这个括号里面的字就是例子）不使用 $\LaTeX$ 来表示。
虽然有许多博客和题解都在用 $\LaTeX$ 写一些程序语言，包括但不限于 $k[i]=(a[i]+b[i])%p,x==y,s_i=s_{i-1}+a_i,c=(c&amp;laquo;3)$，但并不提倡这么做。一般提倡在 $\LaTeX$ 里写公式都用数学语言，以上三个错误示范用数学语言表达应该是：
$$k_i=(a_i+b_i)\bmod{p},x=y,s_i\gets s_{i-1}+a_i,c\gets c\times 2^3$$
此外还有，所有能用 $\LaTeX$ 公式表示的东西，比如最大公约数函数和最小值函数，都用 $\LaTeX$ 公式表示为佳，即表示为 $\gcd, \min$（自带的函数）而不是 $gcd, min$（用 $\LaTeX$ 但没有用自带函数的表示而是直接写字母）也不是 gcd, min（没有 $\LaTeX$）。
一般情况下，普通的分数 frac 太小了，建议使用大型分数 dfrac。同时不推荐在严谨的博客（如题解，学习笔记）加入过多颜色内容。</description>
    </item>
    
    <item>
      <title>2021全真模拟</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/2021%E5%85%A8%E7%9C%9F%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Sun, 29 Aug 2021 21:31:17 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/2021%E5%85%A8%E7%9C%9F%E6%A8%A1%E6%8B%9F/</guid>
      <description>总结 考试策略 T1 $n^2$ 暴力显然，因为好写而且没有想到正解所以直接跳过。T2 因为题意一直在强调几个东西，把这些当做状态就切掉了。仔细阅读 T3 之后没有好想法，所以回到 T1，想到一种正解。写了三分查找，过了大样例后时间剩余不多，紧急回头写 T3 暴力与骗分。
结果反思 T1：期望得分 $100$，实际得分 $35$，三分查找挂掉了。代码实现能力需加强。
T2：期望得分 $100$，实际得分 $100$。
T3：期望得分 $5$，实际得分 $0$。没骗到分，题目不会属于个人能力问题。
题解 T1：斯  给定两个长度为 $n$ 的实数序列 $a,b$。对于任意一个序列的任意一个数，你都可以用 $1$ 的代价标记这个数。记 $a$ 序列标记的数之和为 $s_a$，$b$ 序列标记的数之和为 $s_b$。你的到的收益为 $\min(sa,sb)$ 减去花费的代价。求收益最大值。$n\leqslant 10^5,1\leqslant a_i,b_i\leqslant 10$。
 考虑到选择一个数的代价都是 $1$。那么对于属于同一序列的数，显然优先选择数值更大的。本题的重点就是显然不能全部选择，因为代价随选择个数线性增长，可能选到后面就有些入不敷出。因为一定优先选择最大的，所以不妨先给 $a,b$ 按大到小排个序，此时一个符合贪心策略的选择方案就是在 $a$ 数组选前若干个，$b$ 数组选前若干个。
因为是选择前若干个，还可以用前缀和跑一下，记录 $sa_i=\sum_{j=1}^i a_j$，$sb_i=\sum_{j=1}^i b_j$，题意简化成，确定一个有序二元组 $(i,j)$，使得 $\min(sa_i+sb_j)-(i+j)$ 最大。
还有一点要注意的是因为允许不选择，所以答案一定不会小于 $0$。
不妨假设我们已经确定的二元组中 $i$ 取什么值，考虑求 $j$ 的范围。因为当 $j$ 较小的时候，$\min$ 函数会取到 $sb_j$，因为 $b_i\geqslant 1$，所以 $j$ 每减小 $1$，虽然代价减少了 $1$，但是少选的数的贡献不少于一，整体是不上升的。换句话说此时答案随 $j$ 减小而不升；当 $j$ 较大的时候，$\min$ 函数会取到 $sa_i$，此时 $sb_j$ 再大也无济于事，$j$ 增大只会让代价随之增大。换句话说此时答案随 $j$ 增大而增大。</description>
    </item>
    
    <item>
      <title>LCP 和后缀数组</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/lcp-%E5%92%8C%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 28 Aug 2021 10:40:36 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/lcp-%E5%92%8C%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</guid>
      <description>前言 后缀数组（SA）是一种可以用于处理字符串后缀有关性质，包括 LCP 等的思想。一般复杂度用 $\operatorname{O}(n\log n)$ 版本，有 $\operatorname{O}(n)$ 版本但相对复杂，码量大。本文讨论的是严格的 $\operatorname{O}(n\log n)$ 的。
后缀自动机（SAM）则是一种强有力的数据结构，用于解决有关字符串的很多东西。一般复杂度是 $\operatorname{O}(n)$ 的。因为写博客的时间原因 SAM 暂时咕着。暂时只讨论 SA。
本文可能出现的部分词语定义如下：
 后缀：字符串 $s$ 的后缀，定义为字符串的某个位置到字符串末尾的子串。特别的，称从第 $i$ 个字符为第一个元素的后缀为第 $i$ 个后缀。 前缀：基本同后缀，只是定义为从字符串第一个字符到某个位置的子串。 后缀的排名：定义第 $i$ 个后缀的排名，为字符串所有后缀按字典序排序后，第 $i$ 个后缀的排名。 LCP：定义 $\operatorname{LCP}(i,j)$ 为一个字符串排名为 $i$ 的后缀和排名为 $j$ 的后缀的最长公共前缀，有时只最长公共前缀长度，本文也是如此，有的地方指最长公共前缀，有的地方指最长公共前缀长度。 字符串的大小关系：两个字符串比较大小，默认是比较字典序谁先谁后。  此外，在后文中，如果没有特殊定义，则 $s$ 表示需要处理的字符串，$n=\left| s\right|$，即 $s$ 的串长，下标从 $1$ 开始编号。
LCP 的性质与引理 根据 LCP 的定义，有这样两个显然的性质：
 $\operatorname{LCP}(i,j)=\operatorname{LCP}(j,i)$ 记 $len_i$ 表示排名为 $i$ 的后缀的长度，有 $\operatorname{LCP}(i,i)=len_i$。  这样，计算 LCP 时，对于 $i&amp;gt;j$ 的情况，可以转化为 $i&amp;lt;j$ 的情况做。对于 $i=j$ 的情况，直接用 $sa_i$ 算就行。简化了代码实现的复杂程度。</description>
    </item>
    
    <item>
      <title>CF1553部分题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/cf1553%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Sun, 15 Aug 2021 21:33:57 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/cf1553%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <description>前言 这一会 CF1553 的 vp 截取的是 DEFG 四道题目，因为 AC 两题我也做出来了，所以会放在一起。另外有一个 B 算法显然。因此本次题解包含 CF1553-ACDEFG 的解释加代码，以及 CF1553-B 的口胡。
总结 考试策略 CF 当天的考试写出了 AC，B 算法非常显然，也知道怎么做但是并没有写，因为看错数据范围了以为过不去。后面的时间一直在写 F 但是写不出来。vp 的时候第一个就去做 F，随后开始写 D，写完 D 后口胡出 G 的算法但是没来得及写了。E 是考后看题解知道的算法。
自我感觉整体策略还行，但是有一些瑕疵，比如看错数据范围之类，因为“个人恩怨”选择先写 F，放着别的题不管。
目前 vp 涉及的题目 DEFG 已经全部改对。
问题 看错数据范围错失良机。以及推演题目的过程较慢，严重拖慢了时间。实际上本来不需要这么慢。
打 vp 的时候尤其凸显。而且因为个人对一道题的兴趣和本来没做出来的怒气决定先做 F 这样一个恶心数论，而没有选择从最简单的 D 开始入手击破，是最大的问题所在。考场上不宜使用。
同时因为打 cf 的时候老师提出来了，特此注意：打 cf 的时候不要只拘泥于 ABC 这样的题目，否则能力无法得到训练，要多尝试往上走的难题，得到真正的训练，而不是划水试地做完一些是个人都会的签到题就不管了。
题解 CF1553A  定义 $\operatorname{S}(x)$ 为 $x$ 在十进制下各位数字之和。共 $T$ 次询问，每次询问给定一个数 $n$，求有多少不超过 $n$ 的正整数满足 $\operatorname{S}(x)&amp;gt;\operatorname{S}(x+1)$。$T\leqslant 10^3,n\leqslant 10^9$。</description>
    </item>
    
    <item>
      <title>全真模部分题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/%E5%85%A8%E7%9C%9F%E6%A8%A1%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 21:45:39 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/%E5%85%A8%E7%9C%9F%E6%A8%A1%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <description>考试策略： 比较不行，前面花了太多时间在 T1 上，实际上最后个人感觉 T1 最难。T2 类似于一个猜结果后证明的东西，考虑到数据范围，必然网络流二分图动态规划三选一。因为个人动态规划水平不太好，优先考虑网络流做法没想出来，又因为想到网格图一定是二分图，所以尝试用二分图的角度解释必胜方式，从而证明正确性。T3 因为以前同学讲点分治的时候提到过：
 点分治可以用来处理树上路径长度有关的奇特问题，包括刚好等于的，L 到 R 之间的，一个倍数的……
 看到“长度-最大值”为倍数的时候直接定档点分治，但是因为 T1 耗时间太多没有时间打。最后 T1T3 暴力写挂没有捞到分，总分只由 T2 AC 的 100 分。
问题所在和反思 T1 最开始想到点分治。显然过于草率被题目的“区间范围”误导了。是缺乏经验的表现。后来及时发现应该使用dsu on tree更好地维护本题。但是没有考虑到不从这个子树的根出发的路径的情况，这一发直接把我送走，考场上改到 11 点放弃了，晚上改到 2 点（刚刚终于 A 了，才开始写总结）
T2 我承认找到正解有一定的运气成分。如果我很自信地认为我的 DP 很好，说不定我会更加往博弈论 DP 的方向想，而不会发现二分图最大匹配的做法。代码实现方面比较混乱，一定程度上造成调试困难。
T3 是裸的点分治。我在做题记录里写到点分治是一个好写难调的做法。改题的时候再一次验证了这个观点，需要实现的细节繁多。属于典型的“在考场上我就算知道这题正解我也不会马上干这个题”的类型。
用通俗的网络流行语总结，就叫做一切恐惧来源于火力不足，网络流和二分图题单上我几乎已经做完了所以很熟悉，但是点分治和 dsu，题单上这类题较少，练习不多，更容易出错，会对这类算法产生一种“No I can&amp;rsquo;t”的心理。直接导致 T3 我知道正解但是还是 0 分的惨案。
题解 T1，看门狗（watchdog）  给定一个大小为 $n$ 的有根树，$1$ 为根。每个节点有权值 $l,r$ 表示一个边数区间，边有边权，对于每一个子树，求经过这个子树的根节点的所有边数在子树根节点边数区间内的简单路径中的最大边权和。时间限制 4s，$n\leqslant 10^6$，边权为不超过 $10^9$ 的非负整数。
 第一眼看到区间范围，树上求一条路径的属性，容易联想到点分治。但是实际而言，权值范围过大，点分治不能很好地实现。考虑到时间限制为 $4$s，可以放跑一些 $n\log^2 n$ 的做法。因为边权一定是非负整数，所以对于同一条路径，向外延伸边数越多，权值一定不降。</description>
    </item>
    
    <item>
      <title>CF1557和CF1530部分题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/cf1557%E5%92%8Ccf1530%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Tue, 10 Aug 2021 12:35:19 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/cf1557%E5%92%8Ccf1530%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <description>前言 CF1557 是第一场 VP 前一天晚上的比赛。CF1530 是第一场 VP，题目没有全部做完。这里把我写了代码或者从同学那里学习的算法放上来，以供参考。
CF1557 四题，A-D，E 是个交互题很有意思，有时间会去做，做完补在这里。
CF1557A  给定一个序列，将这个序列分成两个子序列。使得两个子序列的所有数的平均数之和最大。求最大值。$n\leqslant 3\times 10^5$。
 考虑贪心的做法。把最大的那个数单独放起来，其他的所有数放在一起。假定数组已经小到大排序好，最大的为 $a_1$，答案则为：
$$a_1+\dfrac{\sum_{i=2}^n a_n}{n-1}$$
考虑证明：首先如果同时存在多个最大值，把几个最大值放在一起显然不行，因为这些最大值造成的贡献为 $0$，反而放在另外一组可以把较小的数平均值拉上来；如果将最大值和别的数字放在一起，对于这一个序列而言，别的数字造成了负贡献，但是因为最大值在这个序列，另一个序列无论如何平均值无法超过最大值，从而无法弥补负贡献。
因此最大值单独一组，别的另一组是最优。因为我只关心最大值是什么，不需要排序。整体复杂度 $\operatorname{O}(n)$ 级别，绰绰有余。
代码如下：
#include&amp;lt;cstdio&amp;gt;#include&amp;lt;string.h&amp;gt;#include&amp;lt;iostream&amp;gt;#define int long long const int max_n=100005; inline int read(){ int x=0;bool w=0;char c=getchar(); while(c&amp;lt;&amp;#39;0&amp;#39; || c&amp;gt;&amp;#39;9&amp;#39;) w|=c==&amp;#39;-&amp;#39;,c=getchar(); while(c&amp;gt;=&amp;#39;0&amp;#39; &amp;amp;&amp;amp; c&amp;lt;=&amp;#39;9&amp;#39;) x=(x&amp;lt;&amp;lt;1)+(x&amp;lt;&amp;lt;3)+(c^48),c=getchar(); return w?-x:x; } inline void write(int x){ if(x&amp;lt;0) x=-x,putchar(&amp;#39;-&amp;#39;); if(x&amp;gt;9) write(x/10); putchar(x%10^48); } inline int min(int a,int b){return a&amp;lt;b?a:b;} inline int max(int a,int b){return a&amp;gt;b?</description>
    </item>
    
    <item>
      <title>RmqProblem 题解</title>
      <link>http://walker68145.github.io/Arahc.github.io/posts/rmqproblem-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Mon, 02 Aug 2021 21:46:14 +0800</pubDate>
      
      <guid>http://walker68145.github.io/Arahc.github.io/posts/rmqproblem-%E9%A2%98%E8%A7%A3/</guid>
      <description>题目大意 题目传送门
给定一个静态区间，有多次询问，每次询问查询一段区间 $[l,r]$ 的 $\operatorname{mex}$。（一个区间的 $\operatorname{mex}$ 为最小的没有出现在这个区间的数字中的自然数）
题目大意一句话可还行
$1\leqslant n,m\leqslant 2\times 10^5$，值域与 $n,m$ 相同。
题目分析 暴力求解 考虑到本题的数据范围整体较小，可以使用莫队进行。不带修的莫队的复杂度约为 $\operatorname{O}(n\sqrt{n})$ 的，但是还要乘上一个求 $\operatorname{mex}$ 的复杂度。
如果我们打出这样的代码：
inline void add(int pos){ ++cnt[a[pos]]; // cnt 表示这个数字出现的次数，a 是原数组 } inline void del(int pos){ --cnt[a[pos]]; } inline int mex(){ // O(n) 跑一遍暴力求mex 	for(register int i=0;i&amp;lt;=max_n;++i) if(cnt[i]&amp;lt;=0) return i; return max_n+1; // 不会超过值域，所以可以这么写 } inline void moque(){ sort(q+1,q+1+m,cmp1); // cmp1：按照莫队的排序方法排序  int l=1,r=0; for(register int i=1;i&amp;lt;=m;++i){ // 莫队板子 	int ql=q[i].</description>
    </item>
    
  </channel>
</rss>
